[{"H:\\client_project\\project1\\project\\src\\App.js":"1","H:\\client_project\\project1\\project\\src\\components\\landing.js":"2","H:\\client_project\\project1\\project\\src\\components\\password.js":"3","H:\\client_project\\project1\\project\\src\\components\\indexedDb.js":"4","H:\\client_project\\project1\\project\\src\\components\\storeInfo.js":"5","H:\\client_project\\project1\\project\\src\\components\\productCartItem.js":"6","H:\\client_project\\project1\\project\\src\\components\\productListDelete.js":"7","H:\\client_project\\project1\\project\\src\\components\\productListEdit.js":"8","H:\\client_project\\project1\\project\\src\\serviceWorker.js":"9","H:\\client_project\\project1\\project\\src\\components\\settings.js":"10","H:\\client_project\\project1\\project\\src\\components\\productAdd.js":"11","H:\\client_project\\project1\\project\\src\\components\\addProduct.js":"12","H:\\client_project\\project1\\project\\src\\components\\productListItem.js":"13"},{"size":216,"mtime":1606490297837,"results":"14","hashOfConfig":"15"},{"size":2669,"mtime":1608056278752,"results":"16","hashOfConfig":"15"},{"size":1201,"mtime":1608306923088,"results":"17","hashOfConfig":"15"},{"size":3489,"mtime":1608055790684,"results":"18","hashOfConfig":"15"},{"size":415,"mtime":1607164492781,"results":"19","hashOfConfig":"15"},{"size":1121,"mtime":1606743922704,"results":"20","hashOfConfig":"15"},{"size":466,"mtime":1606712576790,"results":"21","hashOfConfig":"15"},{"size":3294,"mtime":1608054332157,"results":"22","hashOfConfig":"15"},{"size":4964,"mtime":1595251402585,"results":"23","hashOfConfig":"15"},{"size":2500,"mtime":1607166114253,"results":"24","hashOfConfig":"15"},{"size":572,"mtime":1607163951696,"results":"25","hashOfConfig":"15"},{"size":3926,"mtime":1606733387772,"results":"26","hashOfConfig":"15"},{"size":3612,"mtime":1606795235396,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1s1zfmw",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"33"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"H:\\client_project\\project1\\project\\src\\App.js",[],["57","58"],"H:\\client_project\\project1\\project\\src\\components\\landing.js",[],["59","60"],"H:\\client_project\\project1\\project\\src\\components\\password.js",["61"],"H:\\client_project\\project1\\project\\src\\components\\indexedDb.js",["62","63"],"\r\nfunction IndexedDb(){\r\n\r\n  const databaseName = 'medicinestore';\r\n  const storeName = 'medicine';\r\n  const indexName = 'location';\r\n // create or open db\r\n  let request = window.indexedDB.open(databaseName,2),\r\n     db,\r\n     tx,\r\n     store,\r\n     index;\r\n\r\n // a callback will trigger when we open or create any database\r\n request.onupgradeneeded = (e)=>{\r\n\r\n   let db = request.result,\r\n             store = db.createObjectStore(storeName,{\r\n              keyPath:\"id\"\r\n            }),\r\n            index = store.createIndex(indexName,'storeLocation',{unique:false})\r\n  }\r\n\r\n  // data should be an object with an id\r\n  this.addData = async(data)=>{\r\n\r\n\r\n    return new Promise((resolve,reject)=>{\r\n\r\n       request.onerror = (e)=>{\r\n          reject('error');\r\n       }\r\n\r\n        request.onsuccess = (e)=>{\r\n\r\n          db =  request.result;\r\n\r\n          db.onerror = (e)=>{\r\n\r\n            db.close()\r\n            reject(\"error\")\r\n          }\r\n\r\n\r\n\r\n            tx = db.transaction(storeName,\"readwrite\");\r\n            store = tx.objectStore(storeName);\r\n\r\n\r\n\r\n\r\n            store.put(data);\r\n\r\n            resolve(\"success\")\r\n\r\n            tx.oncomplete = ()=>{\r\n              db.close()\r\n            }\r\n\r\n\r\n       }\r\n\r\n    })\r\n  }\r\n\r\n  this.getAllData = async()=>{\r\n\r\n\r\n    return new Promise((resolve,reject)=>{\r\n\r\n        request.onerror = (e)=>{\r\n\r\n          reject('error')\r\n        }\r\n\r\n        request.onsuccess = (e)=>{\r\n\r\n\r\n          db =  request.result;\r\n\r\n          db.onerror = (e)=>{\r\n\r\n            db.close()\r\n            reject(\"error\")\r\n          }\r\n\r\n            tx =  db.transaction(storeName,\"readwrite\");\r\n\r\n            store = tx.objectStore(storeName);\r\n\r\n            // get all data\r\n            let query = store.getAll()\r\n\r\n            query.onsuccess = (e)=>{\r\n              resolve(query.result)\r\n            }\r\n\r\n            query.onerror = ()=>{\r\n              reject('error')\r\n            }\r\n\r\n\r\n            tx.oncomplete = ()=>{\r\n              db.close()\r\n            }\r\n\r\n        }\r\n    })\r\n  }\r\n\r\n  this.getSpecificData = async(id)=>{\r\n\r\n    return new Promise((resolve,reject)=>{\r\n\r\n        request.onerror = (e)=>{\r\n\r\n          reject('error')\r\n        }\r\n\r\n        request.onsuccess = (e)=>{\r\n\r\n\r\n          db =  request.result;\r\n\r\n          db.onerror = (e)=>{\r\n\r\n            db.close()\r\n            reject(\"error\")\r\n          }\r\n\r\n            tx =  db.transaction(storeName,\"readwrite\");\r\n\r\n            store = tx.objectStore(storeName);\r\n\r\n            // get all data\r\n            let query = store.get(id)\r\n\r\n            query.onsuccess = (e)=>{\r\n              resolve(query.result)\r\n            }\r\n\r\n            query.onerror = ()=>{\r\n              reject('error')\r\n            }\r\n\r\n\r\n            tx.oncomplete = ()=>{\r\n              db.close()\r\n            }\r\n\r\n        }\r\n    })\r\n  }\r\n\r\n  this.deleteData = async(id)=>{\r\n\r\n    return new Promise((resolve,reject)=>{\r\n\r\n       request.onerror = (e)=>{\r\n          reject('error');\r\n       }\r\n\r\n        request.onsuccess = (e)=>{\r\n\r\n          db =  request.result;\r\n\r\n          db.onerror = (e)=>{\r\n\r\n            db.close()\r\n            reject(\"error\")\r\n          }\r\n\r\n\r\n\r\n            tx = db.transaction(storeName,\"readwrite\");\r\n            store = tx.objectStore(storeName);\r\n\r\n            store.delete(id);\r\n\r\n            resolve(\"success\")\r\n\r\n            tx.oncomplete = ()=>{\r\n              db.close()\r\n            }\r\n\r\n\r\n       }\r\n\r\n    })\r\n  }\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default IndexedDb\r\n","H:\\client_project\\project1\\project\\src\\components\\storeInfo.js",[],"H:\\client_project\\project1\\project\\src\\components\\productCartItem.js",["64"],"H:\\client_project\\project1\\project\\src\\components\\productListDelete.js",[],"H:\\client_project\\project1\\project\\src\\components\\productListEdit.js",[],"H:\\client_project\\project1\\project\\src\\serviceWorker.js",[],"H:\\client_project\\project1\\project\\src\\components\\settings.js",[],"H:\\client_project\\project1\\project\\src\\components\\productAdd.js",["65"],"H:\\client_project\\project1\\project\\src\\components\\addProduct.js",[],"H:\\client_project\\project1\\project\\src\\components\\productListItem.js",[],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"66","replacedBy":"70"},{"ruleId":"68","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":1,"column":15,"nodeType":"74","messageId":"75","endLine":1,"endColumn":24},{"ruleId":"72","severity":1,"message":"76","line":12,"column":6,"nodeType":"74","messageId":"75","endLine":12,"endColumn":11},{"ruleId":"72","severity":1,"message":"77","line":21,"column":13,"nodeType":"74","messageId":"75","endLine":21,"endColumn":18},{"ruleId":"78","severity":1,"message":"79","line":19,"column":5,"nodeType":"80","endLine":19,"endColumn":7,"suggestions":"81"},{"ruleId":"72","severity":1,"message":"82","line":4,"column":8,"nodeType":"74","messageId":"75","endLine":4,"endColumn":12},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],["83"],["84"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'index' is defined but never used.","'index' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'props.data.gst', 'props.data.quantity', and 'props.data.sellingPrice'. Either include them or remove the dependency array.","ArrayExpression",["85"],"'logo' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"86","fix":"87"},"Update the dependencies array to be: [props.data.gst, props.data.quantity, props.data.sellingPrice]",{"range":"88","text":"89"},[424,426],"[props.data.gst, props.data.quantity, props.data.sellingPrice]"]